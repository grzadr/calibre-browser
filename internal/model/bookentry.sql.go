// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: bookentry.sql

package model

import (
	"context"
	"time"
)

const bookEntry = `-- name: BookEntry :many
SELECT
    id,
    title,
    author_sort AS authors,
    timestamp AS added_at,
    last_modified AS modified_at,
    path
FROM books
`

type BookEntryRow struct {
	ID         uint16    `json:"id"`
	Title      string    `json:"title"`
	Authors    string    `json:"authors"`
	AddedAt    time.Time `json:"added_at"`
	ModifiedAt time.Time `json:"modified_at"`
	Path       string    `json:"path"`
}

func (q *Queries) BookEntry(ctx context.Context) ([]BookEntryRow, error) {
	rows, err := q.query(ctx, q.bookEntryStmt, bookEntry)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BookEntryRow{}
	for rows.Next() {
		var i BookEntryRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Authors,
			&i.AddedAt,
			&i.ModifiedAt,
			&i.Path,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
